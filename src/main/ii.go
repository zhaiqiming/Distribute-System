package main

import (
	"os"
	"strings"
	"unicode"
	"strconv"
)
import "fmt"
import "mapreduce"

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// Your code here (Part V).
	cmp := func(l rune) bool {
		return !unicode.IsLetter(l)
	}
	s := strings.FieldsFunc(value, cmp)
	kv := make([]mapreduce.KeyValue, 0)
	for _, it := range s {
		kv = append(kv, mapreduce.KeyValue{it, document})
	}
	return kv
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// Your code here (Part V).
	var s string
	num := 0
	mp := make(map[string]int)
	if len(values)!=0{
		s = values[0]
		mp[values[0]] = 1
		num = 1
	}
	for i := 1 ; i < len(values) ; i++{
		flag,_ := mp[values[i]]
		if flag == 0{
			mp[values[i]] = 1
			s = s + "," + values[i]
			num += 1
		}
	}
	return strconv.Itoa(num) + " " + s
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
